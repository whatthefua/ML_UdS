function Xm = Basis(x)
% Normalise race percentages, then calculate entropy
sumPopPct = sum(X(:,[3 4 5 6]), 2);
sumPopPerCap = sum(X(:,[22 23 24 25 26 27]), 2);

Xm = horzcat(X, (X(:,3) ./ sumPopPct) .* log(X(:,3) ./ sumPopPct + 0.00001)             ...
                + (X(:,4) ./ sumPopPct) .* log(X(:,4) ./ sumPopPct + 0.00001)           ...
                + (X(:,5) ./ sumPopPct) .* log(X(:,5) ./ sumPopPct + 0.00001)           ...
                + (X(:,6) ./ sumPopPct) .* log(X(:,6) ./ sumPopPct + 0.00001)           ...
              , (X(:,22) ./ sumPopPerCap) .* log(X(:,22) ./ sumPopPerCap + 0.00001)     ...
                + (X(:,23) ./ sumPopPerCap) .* log(X(:,23) ./ sumPopPerCap + 0.00001)   ...
                + (X(:,24) ./ sumPopPerCap) .* log(X(:,24) ./ sumPopPerCap + 0.00001)   ...
                + (X(:,25) ./ sumPopPerCap) .* log(X(:,25) ./ sumPopPerCap + 0.00001)   ...
                + (X(:,26) ./ sumPopPerCap) .* log(X(:,26) ./ sumPopPerCap + 0.00001)   ...
                + (X(:,27) ./ sumPopPerCap) .* log(X(:,27) ./ sumPopPerCap + 0.00001));

Xm(:, 97) = [];
Xm(:, 96) = [];
Xm(:, 95) = [];
Xm(:, 91) = [];
Xm(:, 83:87) = [];
Xm(:, 43) = [];
Xm(:, 28) = [];
Xm(:, 20) = [];
Xm(:, 10) = [];
Xm(:, 2) = [];